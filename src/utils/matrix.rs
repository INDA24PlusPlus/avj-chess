// Not really a matrix but whatever
// Returns (row, col)
pub fn index_to_col_row(index: usize) -> Option<(i32, i32)> {
    if index > 63 {
        // not continue
        return None;
    }
    let row = ((index as f32) / 8.0).floor() as i32;
    let col = (index % 8) as i32;

    return Some((row, col));
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_index_to_col_row() {
        // Test cases generated by LLM
        assert_eq!(index_to_col_row(0), Some((0, 0)));
        assert_eq!(index_to_col_row(1), Some((0, 1)));
        assert_eq!(index_to_col_row(2), Some((0, 2)));
        assert_eq!(index_to_col_row(3), Some((0, 3)));
        assert_eq!(index_to_col_row(4), Some((0, 4)));
        assert_eq!(index_to_col_row(5), Some((0, 5)));
        assert_eq!(index_to_col_row(6), Some((0, 6)));
        assert_eq!(index_to_col_row(7), Some((0, 7)));
        assert_eq!(index_to_col_row(8), Some((1, 0)));
        assert_eq!(index_to_col_row(9), Some((1, 1)));
        assert_eq!(index_to_col_row(63), Some((7, 7)));
    }
}
